{"/home/travis/build/npmtest/node-npmtest-spell/test.js":"/* istanbul instrument in package npmtest_spell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spell/lib.npmtest_spell.js":"/* istanbul instrument in package npmtest_spell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_spell = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_spell = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-spell/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-spell && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_spell */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_spell\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_spell.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_spell.rollup.js'] =\n            local.assetsDict['/assets.npmtest_spell.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_spell.__dirname + '/lib.npmtest_spell.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spell/node_modules/spell/spell.js":"/* javascript spell checker based on\n*  http://norvig.com/spell-correct.html\n *\n * copyright 2011 nuno job       <nunojob.com> (oO)--',--\n *                pedro teixeira <metaduck.com>\n *\n * licensed under the apache license, version 2.0 (the \"license\");\n * you may not use this file except in compliance with the license.\n * you may obtain a copy of the license at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * unless required by applicable law or agreed to in writing, software\n * distributed under the license is distributed on an \"as is\" basis,\n * without warranties or conditions of any kind, either express or implied.\n * see the license for the specific language governing permissions and\n * limitations under the license.\n */\n(function () {\n  var root            = this\n    , previous_spell  = root.spell\n    ;\n\n  /*\n   * dictionary\n   *\n   * creates a dictionary given a place to store\n   *\n   * @param {dict_store:object:required} \n   *        object that implements two functions\n   *          `get` to retrieve a stored dictionary from disk/memory\n   *          `store` to store a dictionary from disk/memory\n   *\n   * @return {object} a dictionary module\n   */\n  var spell = function dictionary(dict_store) {\nvar dict          = \n    dict_store && typeof dict_store.get === 'function' ? dict_store.get() : {}\n  , noop          = function(){}\n  , alphabet      = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\n  ;\n\nfunction spell_store(cb) { \n  if (dict_store && typeof dict_store.store === 'function') {\n    dict_store.store(dict, cb);\n  }\n}\n\nfunction spell_train(corpus,regex) {\n  var match, word;\n  regex         = regex || /[a-z]+/g;\n  corpus        = corpus.toLowerCase();\n  while ((match = regex.exec(corpus))) {\n    word        = match[0];\n    spell_add_word(word, 1);\n  }\n}\n\nfunction spell_edits(word, alphabetOverride) {\n  var edits        = []\n    , thisAlphabet = alphabetOverride ? alphabetOverride : alphabet\n    , i\n    , j\n    ;\n  for (i=0; i < word.length; i++) {  // deletion\n    edits.push(word.slice(0, i) + word.slice(i+1));\n  }\n  for (i=0; i < word.length-1; i++) { // transposition\n    edits.push( word.slice(0, i) + word.slice(i+1, i+2) + \n      word.slice(i, i+1) + word.slice(i+2));\n  }\n  for (i=0; i < word.length; i++) {  // alteration\n    for(j in thisAlphabet) { \n      edits.push(word.slice(0, i) + thisAlphabet[j] + word.slice(i+1)); \n    }\n  }\n  for (i=0; i <= word.length; i++) { // insertion\n    for(j in thisAlphabet) { \n      edits.push(word.slice(0, i) + thisAlphabet[j] + word.slice(i));\n    }\n  }\n  return edits;\n}\n\nfunction is_empty(obj) { \n  for (var key in obj) { if (obj.hasOwnProperty(key)) return false; }\n  return true;\n}\n\nfunction spell_order(candidates, min, max) {\n  var ordered_candidates = []\n    , current\n    , i\n    , w\n    ;\n  for(i=max; i>=min; i--) {\n    if(candidates.hasOwnProperty(i)) {\n      current = candidates[i];\n      for (w in current) {\n        if(current.hasOwnProperty(w)) {\n          ordered_candidates.push({\"word\": w, \"score\": i});\n        }\n      }\n    }\n  }\n  return ordered_candidates;\n}\n\n/*\n * reset\n *\n * resets the dictionary.\n *\n * e.g.\n * spell.reset();\n *\n * @return void\n */\nfunction spell_reset() { return spell_load({reset: true}); }\n\n/*\n * load\n *\n * loads a free form corpus dictionary.\n *\n * e.g.\n * spell.load({'dog': 1, 'cat': 2});\n * spell.load('dog cat cat');\n *\n * @param {opts.corpus:string|object:optional} \n *        corpus string to initialize to\n * @param {opts.reset:boolean:optional}\n *        whether you want to reset the existing dictionary or just append\n *        to what already exists\n * @param {opts.store:boolean:optional}\n *        decide if you want to use storage\n * @param {opts.after_store:function:optional} \n *        function to call back when store is done\n *\n * @return void\n */\nfunction spell_load(corpus, opts) {\n  if ('object' === typeof corpus) { opts = corpus; }\n  if ('string' === typeof corpus) {\n    if('object' === typeof opts) {\n      opts.corpus = corpus;\n    } else {\n      opts = {corpus: corpus };\n    }\n  }\n  if ('string' === typeof opts)   { opts = {corpus: opts }; }\n  opts               = 'object' === typeof opts ? opts : {};\n  opts.reset         = (opts.reset !== false);\n  opts.store         = (opts.store !== false);\n  opts.after_store   = opts.after_store   || noop;\n  opts.corpus        = opts.corpus        || '';\n  if(opts.reset) { dict  = {}; }\n  if('object' === typeof opts.corpus) {\n    for(var key in opts.corpus) { \n      spell_add_word(key, {score: opts.corpus[key]}); \n    }\n  } else { spell_train(opts.corpus); }\n  if(opts.store) { spell_store(opts.after_store); }\n}\n\n/*\n * add word\n *\n * loads a word into the dictionary\n *\n * e.g.\n * spell.insert_word('dog', 5);\n *\n * @param {word:string:required} \n *        the word you want to add\n * @param {opts.count:int:optional}\n *        the number of times the word appears in a text, defaults to one\n * @param {opts.store:boolean:optional}\n *        decide if you want to use storage\n * @param {opts.done:function:optional} \n *        function to call back when store is done\n *\n * @return void\n */\nfunction spell_add_word(word, opts) {\n  if ('string' === typeof opts || 'number' === typeof opts) { \n    opts = { score: parseInt(opts, 10) };\n  }\n  opts        = 'object' === typeof opts ? opts : {};\n  opts.score  = opts.score  || 1;\n  opts.store  = opts.store  || true;\n  opts.done   = opts.done   || noop;\n  word        = word.toLowerCase();\n  dict[word]  = \n    dict.hasOwnProperty(word) ? dict[word] + opts.score : opts.score;\n  if(opts.store) { spell_store(opts.done); }\n}\n\n/*\n * remove word\n *\n * removes word from the dictionary\n *\n * e.g.\n * spell.remove_word('dog');\n *\n * @param {word:string:required} \n *        the word you want to add\n * @param {opts.store:boolean:optional}\n *        decide if you want to use storage\n * @param {opts.done:function:optional} \n *        function to call back when store is done\n *\n * @return void\n */\nfunction spell_remove_word(word,opts) {\n  opts        = 'object' === typeof opts ? opts : {};\n  opts.store  = (opts.store !== false);\n  opts.done   = opts.done   || noop;\n  if (dict.hasOwnProperty(word)) { delete dict[word]; }\n  if(opts.store) { spell_store(opts.done); }\n}\n\n/*\n * suggest\n *\n * returns spelling sugestions for a given word\n *\n * e.g.\n * spell.suggest('speling');\n *\n * @param {word:string:required} \n *        the word you want to spell check\n * @param {alphabet:array:optional}\n *        if you need to override checking for just words you can set this\n *        and it will enable you to make suggestions that include punctiation\n*         etc\n *\n * @return {array} ordered array containing json objects such as\n *                 [{\"word\": \"spelling\", \"score\": 10}]\n */\nfunction spell_suggest(word, alphabet) {\n  if (dict.hasOwnProperty(word)) {\n    return [{\"word\":word, \"score\": dict[word]}]; \n  }\n  var edits1     = spell_edits(word, alphabet)\n    , candidates = {}\n    , min\n    , max\n    , current_count\n    ;\n  function get_candidates(word) {\n    if(dict.hasOwnProperty(word)) {\n      current_count = dict[word];\n      if (candidates.hasOwnProperty(current_count)) {\n        candidates[current_count][word] = true;\n      } else {\n        candidates[current_count] = {};\n        candidates[current_count][word] = true;\n      }\n      max = max ? (max < current_count ? current_count : max) : current_count;\n      min = min ? (min > current_count ? current_count : min) : current_count;\n    }\n  }\n  edits1.forEach(get_candidates);\n  if(!is_empty(candidates)) { return spell_order(candidates,min,max); }\n  edits1.forEach(function(edit1){\n    spell_edits(edit1, alphabet).forEach(get_candidates);\n  });\n  if(!is_empty(candidates)) { return spell_order(candidates,min,max); }\n  return []; // no suggestions\n}\n\n/*\n * feeling lucky\n *\n * returns the first spelling correction for a word\n *\n * e.g.\n * spell.lucky('speling');\n *\n * @param {word:string:required} \n *        the word you want to spell check\n * @param {alphabet:array:optional}\n *        if you need to override checking for just words you can set this\n *        and it will enable you to make suggestions that include punctiation\n *         etc\n *\n * @return {string} the most likely match\n */\nfunction spell_lucky(word, alphabet) {\n  var suggest = spell_suggest(word, alphabet)[0];\n  if(suggest && suggest.hasOwnProperty(\"word\")) {\n    return suggest.word;\n  }\n  return;\n}\n\n/*\n * export\n *\n * exports the dictionary\n *\n * e.g.\n * spell.export();\n *\n * @return {json} dictionary\n */\nfunction spell_export(word) {\n  return {corpus: dict};\n}\n\nreturn { reset       : spell_reset\n       , load        : spell_load\n       , \"export\"    : spell_export\n       , save        : spell_export       // alias\n       , add_word    : spell_add_word\n       , addWord     : spell_add_word     // alias\n       , remove_word : spell_remove_word\n       , removeWord  : spell_remove_word  // alias\n       , suggest     : spell_suggest\n       , lucky       : spell_lucky\n       };\n  };\n\n  spell._previous = previous_spell;\n  if (typeof exports !== 'undefined') { // nodejs\n    spell.platform     = { name: \"node.js\", version: process.version };\n    spell.version      = JSON.parse(\n      require('fs').readFileSync(__dirname + \"/package.json\")).version;\n    spell.path         = __dirname;\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = spell;\n    }\n    exports.spell = spell;\n  } else { // browser\n    // browser detection is possible in the future\n    spell.platform     = { name: \"browser\" };\n    spell.version      = \"0.0.3\";\n    if (typeof define === 'function' && define.amd) {\n      define('spell', function() { return spell; });\n    } \n    else {\n      root.spell = spell; \n    }\n  }\n})();\n"}